{
  "hash": "b6a90f54d5d1d84d9bfc49347bdb2ca4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Função de Distribuição Empírica\"\ndate: 2024-03-08\ncode-fold: true\n---\n\n\nComeçamos com o problema de estimar uma função de distribuição acumulada. Seja \n\n$$X_1,\\cdots, X_n\\sim F$$\nonde $F(x) = P(X\\leq x)$ é uma função de distribuição na reta real. Estimamos $F$ com a função de distribuição\nempírica.\n\nA função de distribuição empírica $\\widehat{F}_n$ é a função de distribuição que coloca peso $1/n$ em cada ponto\nde dados $X_i$. Formalmente, \n\n$$\n\\widehat{F}_n(x) = \\dfrac{1}{n}\\sum_{i=1}^n \\pmb{I}(X_i\\leq x),\n$$\n\npara $x\\in\\mathbb{R}$, sendo que \n\n$$\n    \\pmb{I}(x)=\\left\\{\n        \\begin{array}{lc} 1, & \\mbox{se } X_i\\leq x \\\\\n        0, & \\mbox{se } X_i > x\\end{array}\\right.\\cdot\n$$\n\n## Dados do nervo\n\nCox and Lewis (1966) relataram 799 tempos de espera entre pulsos sucessivos ao longo de uma fibra nervosa. A figura abaixo mostra os\ndados e a função de distribuição empírica $\\widehat{F}_n$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnervo = read.csv(\"http://leg.ufpr.br/~lucambio/CE313/20241S/nerve.dat\",\n                 header = FALSE) \nhead(nervo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    V1\n1 0.21\n2 0.03\n3 0.05\n4 0.11\n5 0.59\n6 0.06\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn = length(nervo$V1)\nn\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 799\n```\n\n\n:::\n:::\n\n\nO seguinte exemplo mostra como obtermos a função de distribuição acumulada estimada ou empírica no **R**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFn = ecdf(nervo$V1)\npar(mar=c(4,4,1,1))\nplot(Fn, verticals = TRUE, do.points = FALSE, lwd = 2, \n     main = \"Função de distribuição acumulada\")\nrug(nervo$V1)\ngrid()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n**FIGURA 1:** Dados de uma fibra nervosa. Cada linha vertical representa um ponto de dados. A linha sólida é a função de distribuição empírica.\n\n\nO teorema a seguir fornece algumas propriedades de $\\widehat{F}_n$\n\n\n\n::: {.callout-note appearance=\"simple\"}\n## Teorema 4.1\n\nSeja $(_1,\\cdots,X_n)$ uma amostra aleatória da distribuição $F$ e seja $\\widehat{F}_n$ a função de distribuição empírica. Então\n\n1. Para qualquer valor fixo $x\\in\\mathbb{R}$, \n$$\n\\mbox{E}\\Big(\\widehat{F}_n(x) \\Big)=F(x) \\qquad \\mbox{e} \\qquad\n\\mbox{Var}\\Big(\\widehat{F}_n(x) \\Big)=\\dfrac{F(x)(1-F(x))}{n}\\cdot\n$$\nIsto significa que $\\widehat{F}_n(x)$ é consistente para $F(x)$.\n\n2. **Teorema de Glivenco-Cantelli** \n$$\n\\sup_x |\\widehat{F}_n(x)-F(x) | \\to 0, \\quad \\mbox{quase\ncertamente}\\cdot\n$$\n3. **Teorema desigualdade de Dvoretzky-Kiefer-Wolfowitz**\n\n$$\nP \\left( \\sup_x | \\widehat{F}_n (x) - F(x) | > \\epsilon \\right)\n\\leq 2\\mbox{e}^{-2n\\epsilon} \\quad \\mbox{para algum } \\epsilon > 0\n$$\n:::\n\n### Demonstração\n\nA partir da desigualdade de Dvoretzky-Kiefer-Wolfowitz (DKW), podemos construir um conjunto de confiança. Seja $\\epsilon^2_n = \\log(2/\\alpha)/(2n)$, $L(x) = \\max\\{\\widehat{F}_n(x) - \\epsilon_n,0\\}$ e $U(x) = \\min\\{\\widehat{F}_n(x) + \\epsilon_n, 1\\}$. Segue do item 3, no teorema acima, que para qualquer $F$, \n\n$$\nP\\Big( L(x)\\leq F(x)\\leq U(x) \\quad \\forall x\\in\\mathbb{R}\\Big) \\geq\n1-\\alpha\\cdot\n$$\n\nAssim, $\\big(L(x), U(x)\\big)$ é\numa faixa de confiança não paramétrica com coeficiente de confiaça $1-\\alpha$. Existem faixas de confiança\nmais restritas, mas usamos a faixa DKW porque é simples.\n&lt;br&lt;\n\n\n## Intervalo de confiança\n\nQueremos obter uma banda de confiança para $\\widehat{F}_n$ com nível de confiança $\\alpha=0.05$. Para isto utilizaremos a desigualdade DKW, no Teorema 1.\n\nObservemos que \n$$\n\\epsilon = \\sqrt{\\frac{1}{2n}\\log\\big( \\frac{2}{0.05}\\big)} = 0.048\\cdot\n$$\n\nEncontremos os limites do intervalo de confiança.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nepsilon = sqrt(1/(2*n)*log(2/0.05))\nepsilon\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.04804618\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nls(environment(Fn))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"f\"      \"method\" \"na.rm\"  \"nobs\"   \"x\"      \"y\"      \"yleft\"  \"yright\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny = get(\"y\",environment(Fn))\nx = get(\"x\",environment(Fn))\nL = ifelse(y-epsilon<0,0,y-epsilon)\nU = ifelse(y+epsilon>1,1,y+epsilon)\n```\n:::\n\n\n\nMostrando o gráfico resultante, ou seja, a função de distribuição empírica e a banda de confiança.\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar=c(4,4,1,1))\nplot(Fn, verticals = TRUE, do.points = FALSE, lwd = 2, \n     main = \"Função de distribuição acumulada\")\nlines(knots(Fn),L,type=\"b\",pch=19,cex=0.3)\nlines(knots(Fn),U,type=\"b\",pch=19,cex=0.3)\nrug(nervo$V1)\ngrid()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n**FIGURA 2:** Dados de uma fibra nervosa. Cada linha vertical representa um ponto de dados. A linha sólida é a função de distribuição empírica. As linhas acima e abaixo da linha média representam uma faixa de confiança de 95%.\n\n\n## Exercícios\n\n1. Gere 100 observações a partir de uma distribuição $N(0,1)$. Calcule uma faixa de confiança de 95% para a função de distribuição empírica $\\widehat{F}_n$. Repita isso 1000 vezes e veja com que frequência a faixa de confiança contém a verdadeira função de distribuição. Repita usando dados de uma distribuição Cauchy.\n\n2. Seja $X_1,\\cdots, X_n$ uma amostra aleatória da distribuição $F$ e seja $\\widehat{F}_n$ a função de distribuição empírica. Para um $x$\nfixo, encontre a distribuição limite de $\\sqrt{\\widehat{F}_n(x)}$.\n\n3. Sejam $x$ e $y$ dois pontos distintos. Encontre $\\mbox{Cov}\\Big(\\widehat{F}_n(x),\\widehat{F}_n(y)\\Big)$.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}